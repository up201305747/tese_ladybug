//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the slam_ekf_beacons package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __slam_ekf_beacons__DYNAMICPARAMETERSCONFIG_H__
#define __slam_ekf_beacons__DYNAMICPARAMETERSCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace slam_ekf_beacons
{
  class DynamicParametersConfigStatics;

  class DynamicParametersConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(DynamicParametersConfig &config, const DynamicParametersConfig &max, const DynamicParametersConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const DynamicParametersConfig &config1, const DynamicParametersConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, DynamicParametersConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const DynamicParametersConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, DynamicParametersConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const DynamicParametersConfig &config) const = 0;
      virtual void getValue(const DynamicParametersConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T DynamicParametersConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (DynamicParametersConfig::* field);

      virtual void clamp(DynamicParametersConfig &config, const DynamicParametersConfig &max, const DynamicParametersConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const DynamicParametersConfig &config1, const DynamicParametersConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, DynamicParametersConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const DynamicParametersConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, DynamicParametersConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const DynamicParametersConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const DynamicParametersConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, DynamicParametersConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, DynamicParametersConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<DynamicParametersConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(DynamicParametersConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("kalman_filter_method"==(*_i)->name){kalman_filter_method = boost::any_cast<int>(val);}
        if("IKF_iterations"==(*_i)->name){IKF_iterations = boost::any_cast<int>(val);}
        if("data_assoc_metric"==(*_i)->name){data_assoc_metric = boost::any_cast<int>(val);}
        if("data_assoc_IC_chi2_thres"==(*_i)->name){data_assoc_IC_chi2_thres = boost::any_cast<double>(val);}
        if("data_assoc_IC_ml_threshold"==(*_i)->name){data_assoc_IC_ml_threshold = boost::any_cast<double>(val);}
        if("data_assoc_method"==(*_i)->name){data_assoc_method = boost::any_cast<int>(val);}
        if("data_assoc_IC_metric"==(*_i)->name){data_assoc_IC_metric = boost::any_cast<int>(val);}
        if("motion_model_gaussian_a1"==(*_i)->name){motion_model_gaussian_a1 = boost::any_cast<double>(val);}
        if("motion_model_gaussian_a2"==(*_i)->name){motion_model_gaussian_a2 = boost::any_cast<double>(val);}
        if("motion_model_gaussian_a3"==(*_i)->name){motion_model_gaussian_a3 = boost::any_cast<double>(val);}
        if("motion_model_gaussian_a4"==(*_i)->name){motion_model_gaussian_a4 = boost::any_cast<double>(val);}
        if("motion_model_gaussian_minStdXY"==(*_i)->name){motion_model_gaussian_minStdXY = boost::any_cast<double>(val);}
        if("motion_model_gaussian_minStdPHI"==(*_i)->name){motion_model_gaussian_minStdPHI = boost::any_cast<double>(val);}
        if("sensor_std_range"==(*_i)->name){sensor_std_range = boost::any_cast<double>(val);}
        if("sensor_std_yaw"==(*_i)->name){sensor_std_yaw = boost::any_cast<double>(val);}
      }
    }

    int kalman_filter_method;
int IKF_iterations;
int data_assoc_metric;
double data_assoc_IC_chi2_thres;
double data_assoc_IC_ml_threshold;
int data_assoc_method;
int data_assoc_IC_metric;
double motion_model_gaussian_a1;
double motion_model_gaussian_a2;
double motion_model_gaussian_a3;
double motion_model_gaussian_a4;
double motion_model_gaussian_minStdXY;
double motion_model_gaussian_minStdPHI;
double sensor_std_range;
double sensor_std_yaw;

    bool state;
    std::string name;

    
}groups;



//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int kalman_filter_method;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int IKF_iterations;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int data_assoc_metric;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double data_assoc_IC_chi2_thres;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double data_assoc_IC_ml_threshold;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int data_assoc_method;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int data_assoc_IC_metric;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double motion_model_gaussian_a1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double motion_model_gaussian_a2;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double motion_model_gaussian_a3;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double motion_model_gaussian_a4;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double motion_model_gaussian_minStdXY;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double motion_model_gaussian_minStdPHI;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double sensor_std_range;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double sensor_std_yaw;
//#line 218 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("DynamicParametersConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const DynamicParametersConfig &__max__ = __getMax__();
      const DynamicParametersConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const DynamicParametersConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const DynamicParametersConfig &__getDefault__();
    static const DynamicParametersConfig &__getMax__();
    static const DynamicParametersConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const DynamicParametersConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void DynamicParametersConfig::ParamDescription<std::string>::clamp(DynamicParametersConfig &config, const DynamicParametersConfig &max, const DynamicParametersConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class DynamicParametersConfigStatics
  {
    friend class DynamicParametersConfig;

    DynamicParametersConfigStatics()
    {
DynamicParametersConfig::GroupDescription<DynamicParametersConfig::DEFAULT, DynamicParametersConfig> Default("Default", "", 0, 0, true, &DynamicParametersConfig::groups);
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.kalman_filter_method = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.kalman_filter_method = 3;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.kalman_filter_method = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<int>("kalman_filter_method", "int", 0, "The method to employ (default: kfEKFNaive)", "{'enum_description': 'TODO', 'enum': [{'srcline': 9, 'description': 'TODO', 'srcfile': '/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'EKFNaive'}, {'srcline': 10, 'description': 'TODO', 'srcfile': '/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'EKFAlaDavison'}, {'srcline': 11, 'description': 'TODO', 'srcfile': '/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'IKFFull '}, {'srcline': 12, 'description': 'TODO', 'srcfile': '/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'IKF'}]}", &DynamicParametersConfig::kalman_filter_method)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<int>("kalman_filter_method", "int", 0, "The method to employ (default: kfEKFNaive)", "{'enum_description': 'TODO', 'enum': [{'srcline': 9, 'description': 'TODO', 'srcfile': '/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'EKFNaive'}, {'srcline': 10, 'description': 'TODO', 'srcfile': '/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'EKFAlaDavison'}, {'srcline': 11, 'description': 'TODO', 'srcfile': '/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'IKFFull '}, {'srcline': 12, 'description': 'TODO', 'srcfile': '/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'IKF'}]}", &DynamicParametersConfig::kalman_filter_method)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.IKF_iterations = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.IKF_iterations = 100;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.IKF_iterations = 5;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<int>("IKF_iterations", "int", 0, "Number of refinement iterations, only for the IKF method (default: 5)", "", &DynamicParametersConfig::IKF_iterations)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<int>("IKF_iterations", "int", 0, "Number of refinement iterations, only for the IKF method (default: 5)", "", &DynamicParametersConfig::IKF_iterations)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.data_assoc_metric = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.data_assoc_metric = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.data_assoc_metric = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<int>("data_assoc_metric", "int", 0, "Different metrics for data association (default: metricMaha)", "{'enum_description': 'TODO', 'enum': [{'srcline': 18, 'description': 'TODO', 'srcfile': '/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'metricMaha'}, {'srcline': 19, 'description': 'TODO', 'srcfile': '/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'metricML'}]}", &DynamicParametersConfig::data_assoc_metric)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<int>("data_assoc_metric", "int", 0, "Different metrics for data association (default: metricMaha)", "{'enum_description': 'TODO', 'enum': [{'srcline': 18, 'description': 'TODO', 'srcfile': '/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'metricMaha'}, {'srcline': 19, 'description': 'TODO', 'srcfile': '/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'metricML'}]}", &DynamicParametersConfig::data_assoc_metric)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.data_assoc_IC_chi2_thres = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.data_assoc_IC_chi2_thres = 1.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.data_assoc_IC_chi2_thres = 0.99;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<double>("data_assoc_IC_chi2_thres", "double", 0, "Threshold in [0,1] for the chi2square test for individual compatibility between predictions and observations (default: 0.99)", "", &DynamicParametersConfig::data_assoc_IC_chi2_thres)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<double>("data_assoc_IC_chi2_thres", "double", 0, "Threshold in [0,1] for the chi2square test for individual compatibility between predictions and observations (default: 0.99)", "", &DynamicParametersConfig::data_assoc_IC_chi2_thres)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.data_assoc_IC_ml_threshold = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.data_assoc_IC_ml_threshold = 1.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.data_assoc_IC_ml_threshold = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<double>("data_assoc_IC_ml_threshold", "double", 0, "Only if data_assoc_IC_metric==ML, the log-ML threshold (Default=0.0) ", "", &DynamicParametersConfig::data_assoc_IC_ml_threshold)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<double>("data_assoc_IC_ml_threshold", "double", 0, "Only if data_assoc_IC_metric==ML, the log-ML threshold (Default=0.0) ", "", &DynamicParametersConfig::data_assoc_IC_ml_threshold)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.data_assoc_method = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.data_assoc_method = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.data_assoc_method = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<int>("data_assoc_method", "int", 0, "Different algorithms for data association, used in mrpt::slam::data_association (default: assocNN)", "{'enum_description': 'TODO', 'enum': [{'srcline': 25, 'description': 'Nearest-neighbor', 'srcfile': '/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'assocNN'}, {'srcline': 26, 'description': 'JCBB: Joint Compatibility Branch & Bound [Neira, Tardos 2001]', 'srcfile': '/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'assocJCBB'}]}", &DynamicParametersConfig::data_assoc_method)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<int>("data_assoc_method", "int", 0, "Different algorithms for data association, used in mrpt::slam::data_association (default: assocNN)", "{'enum_description': 'TODO', 'enum': [{'srcline': 25, 'description': 'Nearest-neighbor', 'srcfile': '/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'assocNN'}, {'srcline': 26, 'description': 'JCBB: Joint Compatibility Branch & Bound [Neira, Tardos 2001]', 'srcfile': '/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'assocJCBB'}]}", &DynamicParametersConfig::data_assoc_method)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.data_assoc_IC_metric = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.data_assoc_IC_metric = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.data_assoc_IC_metric = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<int>("data_assoc_IC_metric", "int", 0, "Whether to use mahalanobis (->chi2 criterion) vs. Matching likelihood", "{'enum_description': 'TODO', 'enum': [{'srcline': 18, 'description': 'TODO', 'srcfile': '/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'metricMaha'}, {'srcline': 19, 'description': 'TODO', 'srcfile': '/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'metricML'}]}", &DynamicParametersConfig::data_assoc_IC_metric)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<int>("data_assoc_IC_metric", "int", 0, "Whether to use mahalanobis (->chi2 criterion) vs. Matching likelihood", "{'enum_description': 'TODO', 'enum': [{'srcline': 18, 'description': 'TODO', 'srcfile': '/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'metricMaha'}, {'srcline': 19, 'description': 'TODO', 'srcfile': '/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'metricML'}]}", &DynamicParametersConfig::data_assoc_IC_metric)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.motion_model_gaussian_a1 = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.motion_model_gaussian_a1 = 1.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.motion_model_gaussian_a1 = 0.05;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<double>("motion_model_gaussian_a1", "double", 0, "meters/meter (default: 0.05)", "", &DynamicParametersConfig::motion_model_gaussian_a1)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<double>("motion_model_gaussian_a1", "double", 0, "meters/meter (default: 0.05)", "", &DynamicParametersConfig::motion_model_gaussian_a1)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.motion_model_gaussian_a2 = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.motion_model_gaussian_a2 = 1.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.motion_model_gaussian_a2 = 0.001;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<double>("motion_model_gaussian_a2", "double", 0, "meters/degree (default: 0.001)", "", &DynamicParametersConfig::motion_model_gaussian_a2)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<double>("motion_model_gaussian_a2", "double", 0, "meters/degree (default: 0.001)", "", &DynamicParametersConfig::motion_model_gaussian_a2)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.motion_model_gaussian_a3 = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.motion_model_gaussian_a3 = 180.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.motion_model_gaussian_a3 = 5.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<double>("motion_model_gaussian_a3", "double", 0, "degrees/meter (default: 5.0)", "", &DynamicParametersConfig::motion_model_gaussian_a3)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<double>("motion_model_gaussian_a3", "double", 0, "degrees/meter (default: 5.0)", "", &DynamicParametersConfig::motion_model_gaussian_a3)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.motion_model_gaussian_a4 = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.motion_model_gaussian_a4 = 1.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.motion_model_gaussian_a4 = 0.05;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<double>("motion_model_gaussian_a4", "double", 0, "degrees/degree (default: 0.05)", "", &DynamicParametersConfig::motion_model_gaussian_a4)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<double>("motion_model_gaussian_a4", "double", 0, "degrees/degree (default: 0.05)", "", &DynamicParametersConfig::motion_model_gaussian_a4)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.motion_model_gaussian_minStdXY = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.motion_model_gaussian_minStdXY = 1.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.motion_model_gaussian_minStdXY = 0.01;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<double>("motion_model_gaussian_minStdXY", "double", 0, "meters (default: 0.01)", "", &DynamicParametersConfig::motion_model_gaussian_minStdXY)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<double>("motion_model_gaussian_minStdXY", "double", 0, "meters (default: 0.01)", "", &DynamicParametersConfig::motion_model_gaussian_minStdXY)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.motion_model_gaussian_minStdPHI = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.motion_model_gaussian_minStdPHI = 10.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.motion_model_gaussian_minStdPHI = 0.2;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<double>("motion_model_gaussian_minStdPHI", "double", 0, "degrees (default: 0.2)", "", &DynamicParametersConfig::motion_model_gaussian_minStdPHI)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<double>("motion_model_gaussian_minStdPHI", "double", 0, "degrees (default: 0.2)", "", &DynamicParametersConfig::motion_model_gaussian_minStdPHI)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sensor_std_range = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sensor_std_range = 1.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sensor_std_range = 0.03;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<double>("sensor_std_range", "double", 0, "meters (default: 0.03)", "", &DynamicParametersConfig::sensor_std_range)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<double>("sensor_std_range", "double", 0, "meters (default: 0.03)", "", &DynamicParametersConfig::sensor_std_range)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sensor_std_yaw = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sensor_std_yaw = 10.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sensor_std_yaw = 0.5;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<double>("sensor_std_yaw", "double", 0, "degrees (default: 0.5)", "", &DynamicParametersConfig::sensor_std_yaw)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(DynamicParametersConfig::AbstractParamDescriptionConstPtr(new DynamicParametersConfig::ParamDescription<double>("sensor_std_yaw", "double", 0, "degrees (default: 0.5)", "", &DynamicParametersConfig::sensor_std_yaw)));
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(DynamicParametersConfig::AbstractGroupDescriptionConstPtr(new DynamicParametersConfig::GroupDescription<DynamicParametersConfig::DEFAULT, DynamicParametersConfig>(Default)));
//#line 356 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<DynamicParametersConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<DynamicParametersConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<DynamicParametersConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    DynamicParametersConfig __max__;
    DynamicParametersConfig __min__;
    DynamicParametersConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const DynamicParametersConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static DynamicParametersConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &DynamicParametersConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const DynamicParametersConfig &DynamicParametersConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const DynamicParametersConfig &DynamicParametersConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const DynamicParametersConfig &DynamicParametersConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<DynamicParametersConfig::AbstractParamDescriptionConstPtr> &DynamicParametersConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<DynamicParametersConfig::AbstractGroupDescriptionConstPtr> &DynamicParametersConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const DynamicParametersConfigStatics *DynamicParametersConfig::__get_statics__()
  {
    const static DynamicParametersConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = DynamicParametersConfigStatics::get_instance();

    return statics;
  }

//#line 9 "/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg"
      const int DynamicParameters_EKFNaive = 0;
//#line 10 "/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg"
      const int DynamicParameters_EKFAlaDavison = 1;
//#line 11 "/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg"
      const int DynamicParameters_IKFFull  = 2;
//#line 12 "/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg"
      const int DynamicParameters_IKF = 3;
//#line 18 "/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg"
      const int DynamicParameters_metricMaha = 0;
//#line 19 "/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg"
      const int DynamicParameters_metricML = 1;
//#line 25 "/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg"
      const int DynamicParameters_assocNN = 0;
//#line 26 "/home/user/catkin_ws_ladybug/src/localization_beacons_stack/slam_ekf_beacons/cfg/DynamicParameters.cfg"
      const int DynamicParameters_assocJCBB = 1;
}

#endif // __DYNAMICPARAMETERSRECONFIGURATOR_H__
