// Generated by gencpp from file robis_nav_msgs/ParametricPath.msg
// DO NOT EDIT!


#ifndef ROBIS_NAV_MSGS_MESSAGE_PARAMETRICPATH_H
#define ROBIS_NAV_MSGS_MESSAGE_PARAMETRICPATH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robis_nav_msgs
{
template <class ContainerAllocator>
struct ParametricPath_
{
  typedef ParametricPath_<ContainerAllocator> Type;

  ParametricPath_()
    : Velocity(0.0)
    , FrameId()
    , CurveType()
    , Fx()
    , Fy()
    , Id(0)  {
    }
  ParametricPath_(const ContainerAllocator& _alloc)
    : Velocity(0.0)
    , FrameId(_alloc)
    , CurveType(_alloc)
    , Fx(_alloc)
    , Fy(_alloc)
    , Id(0)  {
  (void)_alloc;
    }



   typedef float _Velocity_type;
  _Velocity_type Velocity;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _FrameId_type;
  _FrameId_type FrameId;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _CurveType_type;
  _CurveType_type CurveType;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _Fx_type;
  _Fx_type Fx;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _Fy_type;
  _Fy_type Fy;

   typedef int64_t _Id_type;
  _Id_type Id;





  typedef boost::shared_ptr< ::robis_nav_msgs::ParametricPath_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robis_nav_msgs::ParametricPath_<ContainerAllocator> const> ConstPtr;

}; // struct ParametricPath_

typedef ::robis_nav_msgs::ParametricPath_<std::allocator<void> > ParametricPath;

typedef boost::shared_ptr< ::robis_nav_msgs::ParametricPath > ParametricPathPtr;
typedef boost::shared_ptr< ::robis_nav_msgs::ParametricPath const> ParametricPathConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robis_nav_msgs::ParametricPath_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robis_nav_msgs::ParametricPath_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robis_nav_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'robis_nav_msgs': ['/home/user/catkin_ws_ladybug/src/robis_custom_msgs_stack/robis_nav_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robis_nav_msgs::ParametricPath_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robis_nav_msgs::ParametricPath_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robis_nav_msgs::ParametricPath_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robis_nav_msgs::ParametricPath_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robis_nav_msgs::ParametricPath_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robis_nav_msgs::ParametricPath_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robis_nav_msgs::ParametricPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "be3dc67e473d43560114a59131f1f9d0";
  }

  static const char* value(const ::robis_nav_msgs::ParametricPath_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbe3dc67e473d4356ULL;
  static const uint64_t static_value2 = 0x0114a59131f1f9d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::robis_nav_msgs::ParametricPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robis_nav_msgs/ParametricPath";
  }

  static const char* value(const ::robis_nav_msgs::ParametricPath_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robis_nav_msgs::ParametricPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 Velocity\n\
string FrameId\n\
string CurveType\n\
float32[] Fx\n\
float32[] Fy\n\
int64 Id\n\
";
  }

  static const char* value(const ::robis_nav_msgs::ParametricPath_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robis_nav_msgs::ParametricPath_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Velocity);
      stream.next(m.FrameId);
      stream.next(m.CurveType);
      stream.next(m.Fx);
      stream.next(m.Fy);
      stream.next(m.Id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ParametricPath_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robis_nav_msgs::ParametricPath_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robis_nav_msgs::ParametricPath_<ContainerAllocator>& v)
  {
    s << indent << "Velocity: ";
    Printer<float>::stream(s, indent + "  ", v.Velocity);
    s << indent << "FrameId: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.FrameId);
    s << indent << "CurveType: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.CurveType);
    s << indent << "Fx[]" << std::endl;
    for (size_t i = 0; i < v.Fx.size(); ++i)
    {
      s << indent << "  Fx[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.Fx[i]);
    }
    s << indent << "Fy[]" << std::endl;
    for (size_t i = 0; i < v.Fy.size(); ++i)
    {
      s << indent << "  Fy[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.Fy[i]);
    }
    s << indent << "Id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBIS_NAV_MSGS_MESSAGE_PARAMETRICPATH_H
