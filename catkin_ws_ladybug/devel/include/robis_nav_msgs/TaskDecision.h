// Generated by gencpp from file robis_nav_msgs/TaskDecision.msg
// DO NOT EDIT!


#ifndef ROBIS_NAV_MSGS_MESSAGE_TASKDECISION_H
#define ROBIS_NAV_MSGS_MESSAGE_TASKDECISION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robis_nav_msgs
{
template <class ContainerAllocator>
struct TaskDecision_
{
  typedef TaskDecision_<ContainerAllocator> Type;

  TaskDecision_()
    : id_task()
    , Fx()
    , Fy()
    , Vf(0.0)
    , NavigationMode()
    , Action_id()
    , Action_parameters()  {
    }
  TaskDecision_(const ContainerAllocator& _alloc)
    : id_task(_alloc)
    , Fx(_alloc)
    , Fy(_alloc)
    , Vf(0.0)
    , NavigationMode(_alloc)
    , Action_id(_alloc)
    , Action_parameters(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_task_type;
  _id_task_type id_task;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _Fx_type;
  _Fx_type Fx;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _Fy_type;
  _Fy_type Fy;

   typedef float _Vf_type;
  _Vf_type Vf;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _NavigationMode_type;
  _NavigationMode_type NavigationMode;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Action_id_type;
  _Action_id_type Action_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Action_parameters_type;
  _Action_parameters_type Action_parameters;





  typedef boost::shared_ptr< ::robis_nav_msgs::TaskDecision_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robis_nav_msgs::TaskDecision_<ContainerAllocator> const> ConstPtr;

}; // struct TaskDecision_

typedef ::robis_nav_msgs::TaskDecision_<std::allocator<void> > TaskDecision;

typedef boost::shared_ptr< ::robis_nav_msgs::TaskDecision > TaskDecisionPtr;
typedef boost::shared_ptr< ::robis_nav_msgs::TaskDecision const> TaskDecisionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robis_nav_msgs::TaskDecision_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robis_nav_msgs::TaskDecision_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robis_nav_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'robis_nav_msgs': ['/home/user/catkin_ws_ladybug/src/robis_custom_msgs_stack/robis_nav_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robis_nav_msgs::TaskDecision_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robis_nav_msgs::TaskDecision_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robis_nav_msgs::TaskDecision_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robis_nav_msgs::TaskDecision_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robis_nav_msgs::TaskDecision_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robis_nav_msgs::TaskDecision_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robis_nav_msgs::TaskDecision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "948906bf1621b3a1be7266c30c9ef2a4";
  }

  static const char* value(const ::robis_nav_msgs::TaskDecision_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x948906bf1621b3a1ULL;
  static const uint64_t static_value2 = 0xbe7266c30c9ef2a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::robis_nav_msgs::TaskDecision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robis_nav_msgs/TaskDecision";
  }

  static const char* value(const ::robis_nav_msgs::TaskDecision_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robis_nav_msgs::TaskDecision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id_task\n\
float32[] Fx\n\
float32[] Fy\n\
float32 Vf\n\
string  NavigationMode\n\
string  Action_id\n\
string  Action_parameters\n\
";
  }

  static const char* value(const ::robis_nav_msgs::TaskDecision_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robis_nav_msgs::TaskDecision_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id_task);
      stream.next(m.Fx);
      stream.next(m.Fy);
      stream.next(m.Vf);
      stream.next(m.NavigationMode);
      stream.next(m.Action_id);
      stream.next(m.Action_parameters);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TaskDecision_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robis_nav_msgs::TaskDecision_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robis_nav_msgs::TaskDecision_<ContainerAllocator>& v)
  {
    s << indent << "id_task: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id_task);
    s << indent << "Fx[]" << std::endl;
    for (size_t i = 0; i < v.Fx.size(); ++i)
    {
      s << indent << "  Fx[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.Fx[i]);
    }
    s << indent << "Fy[]" << std::endl;
    for (size_t i = 0; i < v.Fy.size(); ++i)
    {
      s << indent << "  Fy[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.Fy[i]);
    }
    s << indent << "Vf: ";
    Printer<float>::stream(s, indent + "  ", v.Vf);
    s << indent << "NavigationMode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.NavigationMode);
    s << indent << "Action_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Action_id);
    s << indent << "Action_parameters: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Action_parameters);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBIS_NAV_MSGS_MESSAGE_TASKDECISION_H
