# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robis_nav_msgs/RobotsPositionByEdge.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import robis_nav_msgs.msg

class RobotsPositionByEdge(genpy.Message):
  _md5sum = "3711249560d8afb64d700e4e5608fca1"
  _type = "robis_nav_msgs/RobotsPositionByEdge"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """PoseRobotEdge[] RobotsPosition

================================================================================
MSG: robis_nav_msgs/PoseRobotEdge
int64 Robot_id
int64 Edge_id
float32 Percentage_edge
"""
  __slots__ = ['RobotsPosition']
  _slot_types = ['robis_nav_msgs/PoseRobotEdge[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       RobotsPosition

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotsPositionByEdge, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.RobotsPosition is None:
        self.RobotsPosition = []
    else:
      self.RobotsPosition = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.RobotsPosition)
      buff.write(_struct_I.pack(length))
      for val1 in self.RobotsPosition:
        _x = val1
        buff.write(_get_struct_2qf().pack(_x.Robot_id, _x.Edge_id, _x.Percentage_edge))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.RobotsPosition is None:
        self.RobotsPosition = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.RobotsPosition = []
      for i in range(0, length):
        val1 = robis_nav_msgs.msg.PoseRobotEdge()
        _x = val1
        start = end
        end += 20
        (_x.Robot_id, _x.Edge_id, _x.Percentage_edge,) = _get_struct_2qf().unpack(str[start:end])
        self.RobotsPosition.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.RobotsPosition)
      buff.write(_struct_I.pack(length))
      for val1 in self.RobotsPosition:
        _x = val1
        buff.write(_get_struct_2qf().pack(_x.Robot_id, _x.Edge_id, _x.Percentage_edge))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.RobotsPosition is None:
        self.RobotsPosition = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.RobotsPosition = []
      for i in range(0, length):
        val1 = robis_nav_msgs.msg.PoseRobotEdge()
        _x = val1
        start = end
        end += 20
        (_x.Robot_id, _x.Edge_id, _x.Percentage_edge,) = _get_struct_2qf().unpack(str[start:end])
        self.RobotsPosition.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2qf = None
def _get_struct_2qf():
    global _struct_2qf
    if _struct_2qf is None:
        _struct_2qf = struct.Struct("<2qf")
    return _struct_2qf
